Question 1
Given an integer `n`, return *`true` if it is a power of three. Otherwise, return `false`*.
An integer `n` is a power of three, if there exists an integer `x` such that `n == 3x`.
Answer-
Code

class Solution(object):
    def isPowerOfThree(self, n):
        """
        :type n: int
        :rtype: bool
        """
        if n == 1:
            return True
        elif n < 3:
            return False
        
        if not n%3:
            return self.isPowerOfThree(n/3)
        return False


Question 3
Given a set represented as a string, write a recursive code to print all subsets of it. The subsets can be printed in any order.

# str : Stores input string
# curr : Stores current subset
# index : Index in current subset, curr


def powerSet(str1, index, curr):
	n = len(str1)

	# base case
	if (index == n):
		return

	# First print current subset
	print(curr)

	# Try appending remaining characters
	# to current subset
	for i in range(index + 1, n):
		curr += str1[i]
		powerSet(str1, i, curr)

		# Once all subsets beginning with
		# initial "curr" are printed, remove
		# last character to consider a different
		# prefix of subsets.
		curr = curr.replace(curr[len(curr) - 1], "")

	return



if __name__ == '__main__':
	str = "abc"
	powerSet(str, -1, "")


**Question 4**

Given a string calculate length of the string using recursion.
Answer

Answer-

Code
def string_length(str) :
	
	# if we reach at the
	# end of the string
	if str == '':
		return 0
	else :
		return 1 + string_length(str[1:])
	
# Driver Code
print (string_length(str))

Question 5
We are given a string S, we need to find count of all contiguous substrings starting and ending with same character.
Answer-


def checkEquality(s):
	return (ord(s[0]) == ord(s[len(s) - 1]));

def countSubstringWithEqualEnds(s):
	result = 0;
	n = len(s);

	# Starting point of substring
	for i in range(n):

	# Length of substring
		for j in range(1,n-i+1):

		# Check if current substring has same
		# starting and ending characters.
			if (checkEquality(s[i:i+j])):
				result+=1;

	return result;

s = "abcab";
print(countSubstringWithEqualEnds(s));

Question 6
The tower of Hanoi is a famous puzzle where we have three rods and N disks. The objective of the puzzle is to move the entire stack to another rod. You are given the number of discs N. Initially, these discs are in the rod 1. 
You need to print all the steps of discs movement so that all the discs reach the 3rd rod. Also, you need to find the total moves.Note: The discs are arranged such that the top disc is numbered 1 and the bottom-most disc is numbered N. Also, all the discs have different sizes and a bigger disc cannot be put on the top of a smaller disc. 
Refer the provided link to get a better clarity about the puzzle.

Answer-

def TowerOfHanoi(n, from_rod, to_rod, aux_rod):
	if n == 0:
		return
	TowerOfHanoi(n-1, from_rod, aux_rod, to_rod)
	print("Move disk", n, "from rod", from_rod, "to rod", to_rod)
	TowerOfHanoi(n-1, aux_rod, to_rod, from_rod)



N = 3

# A, C, B are the name of rods
TowerOfHanoi(N, 'A', 'C', 'B')

Question 7
Given a string str, the task is to print all the permutations of str. A permutation is an arrangement of all or part of a set of objects, with regard to the order of the arrangement. For instance, the words ‘bat’ and ‘tab’ represents two distinct permutation (or arrangements) of a similar three letter word.
Answer-

Code 

def toString(List):
	return ''.join(List)


def permute(a, l, r):
	if l == r:
		print(toString(a))
	else:
		for i in range(l, r):
			a[l], a[i] = a[i], a[l]
			permute(a, l+1, r)
			a[l], a[i] = a[i], a[l] # backtrack



string = "ABC"
n = len(string)
a = list(string)

permute(a, 0, n)


*Question 8**

Given a string, count total number of consonants in it. A consonant is an English alphabet character that is not vowel (a, e, i, o and u). Examples of constants are b, c, d, f, and g.

Answer- 



def isConsonant(ch):
	
	# To handle lower case
	ch = ch.upper()

	return not (ch == 'A' or ch == 'E' or
				ch == 'I' or ch == 'O' or
				ch == 'U') and ord(ch) >= 65 and ord(ch) <= 90

def totalConsonants(string):
	
	count = 0
	
	for i in range(len(string)):

		# To check is character is Consonant
		if (isConsonant(string[i])):
			count += 1
			
	return count

# Driver code
string = "abc de"
print(totalConsonants(string))

